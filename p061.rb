#!/usr/bin/ruby
require 'pe_mylib'
#Find the sum of the only set of six 4-digit figurate numbers with a cyclic property.
desc "4桁の多角数で巡回的である6つの数の合計は？多角数は3,4,5,6,7,8角数を1つづつみたしていること"

# 問題では8128,2882,8281が挙げられている
#
#   8128 -(28)-> 2882 -(82)-> 8281 -(81)-> 8128
#
# 問題の「巡回的」とは4桁の前半2桁と後半2桁が一致していること。
#
# また8128,2882,8281はP(3,127)=8128, P(4,91)=8281, P(5,44)=2882を満たしている
#
# 多角数の求め方一覧
#    3角数 n * (n + 1) / 2
#    4角数 n**2
#    5角数 n * (3 * n - 1) / 2
#    6角数 n * (2 * n - 1)
#    7角数 n * (5 * n - 3) / 2
#    8角数 n * (3n - 2)
#
# とりあえず、まじめに計算したらどれぐらいの数があるのか調べてみる
# 4桁の多角数の個数は以下の通り
#
#      3角数: 96
#      4角数: 68
#      5角数: 56
#      6角数: 48
#      7角数: 43
#      8角数: 40
#
#  あと巡回的な組を見つける際、とくに順番は決まっていないので...
#
#    3角数 -> 4角数 -> 5角数 -> -> 3角数
#    3角数 -> 5角数 -> 6角数 -> -> 3角数
#
#  と3角数を始点・終点と決めると、残りの5つの数の順番の組み合わせを考慮する必要がある。
#  順番についての組み合わせは5!=120通り。
#  
#  まじめに総当たりすると3621755289600通り。このオーダーでは総当たりはちょっと無理...
#
#    96 * 68 * 56 * 48 * 43 * 40 * 120 = 3621755289600
#
#

# 多角数を求める
def figurate_number(e, n)
  r = nil
  case e
    when 3
      r = n * (n + 1) / 2
    when 4
      r = n**2
    when 5
      r = n * (3 * n - 1) / 2
    when 6
      r = n * (2 * n - 1)
    when 7
      r = n * (5 * n - 3) / 2
    when 8
      r = n * (3 * n - 2)
  end
  r
end

(3..8).each {|e|
  count = 0
  n = 0
  loop {
    n += 1

    f = figurate_number(e,n)
    #puts "P(#{e},#{n}) = #{f}"

    next if f < 1000
    break if f >= 10000
    count += 1

  }
  puts "#{e}: #{count}"
}

# 結果の出力
rv = "not implemented..."
puts "result = #{rv}"
